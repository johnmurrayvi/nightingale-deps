cmake_minimum_required(VERSION 2.6)

project(gettext)

set(PACKAGE_VERSION_MAJOR 0)
set(PACKAGE_VERSION_MINOR 18)
set(PACKAGE_VERSION_SUBMINOR 0)

set(PACKAGE_VERSION_STRING "${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}")

add_definitions(-DPACKAGE_VERSION_MAJOR=${PACKAGE_VERSION_MAJOR} -DPACKAGE_VERSION_MINOR=${PACKAGE_VERSION_MINOR} -DPACKAGE_VERSION_SUBMINOR=${PACKAGE_VERSION_SUBMINOR} -DPACKAGE_VERSION_STRING=${PACKAGE_VERSION_STRING})

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules ${CMAKE_MODULE_PATH})

include(MacroBoolTo01)

if(WINCE)
    find_package(Wcecompat REQUIRED)
    include_directories(${WCECOMPAT_INCLUDE_DIR})
    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${WCECOMPAT_INCLUDE_DIR})
    set(LIBRARY_TYPE STATIC)
    add_definitions(-DGETTEXT_STATIC_LIBS)
else(WINCE)
    set(LIBRARY_TYPE SHARED)
endif(WINCE)

find_package(iconv)
set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${ICONV_INCLUDE_DIR})
set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${ICONV_LIBRARIES})

include_directories(${ICONV_INCLUDE_DIR})

if(MSVC)
    add_definitions(-wd4996 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS)
endif(MSVC)

add_subdirectory(gettext-runtime)
#add_subdirectory(gettext-tools)
